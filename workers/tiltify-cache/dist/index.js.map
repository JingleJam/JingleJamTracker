{
  "version": 3,
  "sources": ["../src/utils.ts", "../src/tiltify.ts", "../src/api.ts", "../src/index.ts"],
  "sourcesContent": ["function sortByKey<T>(array: T[], key: keyof T): T[] {\r\n  return array.sort((a, b) => {\r\n      const x = a[key];\r\n      const y = b[key];\r\n      return (x < y) ? 1 : (x > y) ? -1 : 0;\r\n  });\r\n}\r\n\r\nfunction roundAmount(val: number, decimals: number = 2): number {\r\n  return +(Math.round(Number(val + \"e+\" + decimals)) + (\"e-\" + decimals));\r\n}\r\n\r\nfunction getRandomFloat(min: number, max: number): number {\r\n  return Math.random() * (max - min) + min;\r\n}\r\n\r\nexport {\r\n  roundAmount,\r\n  sortByKey,\r\n  getRandomFloat\r\n};\r\n", "import { BaseTiltifyResponse } from \"./types/tiltify/BaseResponse\";\r\nimport { TiltifyUserCampaign } from \"./types/tiltify/TiltifyUserCampaign\";\r\nimport { TiltifyFundraisingEvent } from \"./types/tiltify/TiltifyFundraisingEvent\";\r\nimport { FundraisingEventCampaignsData } from \"./types/tiltify/TiltifyFundraisingEventCampaign\";\r\nimport { YogscastDonationData } from \"./types/yogscast/YogscastDonationData\";\r\n\r\nconst TILTIFY_API_ENDPOINT = \"https://api.tiltify.com/\";\r\nconst TILTIFY_API_OPTIONS: RequestInit = {\r\n    method: \"POST\",\r\n    headers: {\r\n        \"content-type\": \"application/json\",\r\n    },\r\n};\r\n\r\n/*\r\n    Gets campaign information for a specific user and campaign\r\n\r\n    Used for:\r\n        - Yogscast Campaign Pound Amount\r\n        - Yogscast Campaign Dollar Amount\r\n        - Average Conversion Rate\r\n        - Backup Collections Data\r\n*/\r\nexport async function getCampaign(userSlug: string, campaignSlug: string): Promise<TiltifyUserCampaign | null> {\r\n    const request: RequestInit = {\r\n        body: JSON.stringify({\r\n            \"operationName\": \"get_campaign_by_vanity_and_slug\",\r\n            \"variables\": {\r\n                \"vanity\": \"@\" + userSlug,\r\n                \"slug\": campaignSlug\r\n            },\r\n            \"query\": \"query get_campaign_by_vanity_and_slug($vanity: String!, $slug: String!) { campaign(vanity: $vanity, slug: $slug) { publicId legacyCampaignId name slug status originalGoal { value } region { name } totalAmountRaised { value } goal { value } user { id username slug totalAmountRaised { value } } cause { id name slug } fundraisingEvent { publicId legacyFundraisingEventId name slug } livestream { channel type } rewards { quantity remaining amount { value } quantity remaining } } }\"\r\n        }),\r\n        ...TILTIFY_API_OPTIONS\r\n    };\r\n\r\n    const response = await fetch(TILTIFY_API_ENDPOINT, request);\r\n    return ((await response.json()) as BaseTiltifyResponse<{ campaign: TiltifyUserCampaign}>)?.data?.campaign || null;\r\n}\r\n\r\n/*\r\n    Gets all event data for a related cause and fundraiser\r\n\r\n    Used for:\r\n        - Jingle Jam Pound Amount\r\n        - Collections Data\r\n*/\r\nexport async function getEvent(causeSlug: string, fundraiserSlug: string): Promise<TiltifyFundraisingEvent | null> {\r\n    const request: RequestInit = {\r\n        body: JSON.stringify({\r\n            \"operationName\": \"get_cause_and_fe_by_slug\",\r\n            \"variables\": {\r\n                \"causeSlug\": causeSlug,\r\n                \"feSlug\": fundraiserSlug\r\n            },\r\n            \"query\": \"query get_cause_and_fe_by_slug($feSlug: String!, $causeSlug: String!) { fundraisingEvent(slug: $feSlug, causeSlug: $causeSlug) { amountRaised { currency value } rewards { quantity remaining } totalAmountRaised { value } } }\"\r\n        }),\r\n        ...TILTIFY_API_OPTIONS\r\n    };\r\n\r\n    const response = await fetch(TILTIFY_API_ENDPOINT, request);\r\n    return ((await response.json()) as BaseTiltifyResponse<{ fundraisingEvent: TiltifyFundraisingEvent}>)?.data?.fundraisingEvent || null;\r\n}\r\n\r\n/*\r\n    Gets the list of all campaigns for a given fundraiser\r\n\r\n    Used for:\r\n        - Listing Out Campaigns\r\n        - Calculating Raised for each Cause\r\n*/\r\nexport async function getCampaigns(fundraiserPublicId: string, offset: number): Promise<FundraisingEventCampaignsData> {\r\n    const request: RequestInit = {\r\n        body: JSON.stringify({\r\n            \"operationName\": \"get_campaigns_by_fundraising_event_id\",\r\n            \"variables\": {\r\n                \"limit\": 20,\r\n                \"offset\": offset,\r\n                \"query\": null,\r\n                \"regionId\": null,\r\n                \"publicId\": fundraiserPublicId\r\n            },\r\n            \"query\": \"query get_campaigns_by_fundraising_event_id($publicId: String!, $limit: Int!, $query: String, $offset: Int, $regionId: Int) { fundraisingEvent(publicId: $publicId) { publishedCampaigns( limit: $limit offset: $offset query: $query regionId: $regionId ) { pagination { hasNextPage limit offset total } edges { node {... on Campaign { publishedAt description name slug user { avatar { src } id username slug social { twitch } } region { id } totalAmountRaised { value } livestream { channel type } goal { value } } } } } } }\"\r\n        }),\r\n        ...TILTIFY_API_OPTIONS\r\n    };\r\n\r\n    const response = await fetch(TILTIFY_API_ENDPOINT, request);\r\n    return ((await response.json()) as BaseTiltifyResponse<{ fundraisingEvent: FundraisingEventCampaignsData}>)?.data?.fundraisingEvent || null;\r\n}\r\n\r\n/*\r\n    Gets the data from the Yogscast API endpoint\r\n\r\n    Used for:\r\n        - Getting the donation count\r\n*/\r\nexport async function getYogscastAPI(): Promise<YogscastDonationData> {\r\n    const response = await fetch('https://jinglejam.yogscast.com/api/total');\r\n    return await response.json();\r\n}\r\n", "import { roundAmount, sortByKey } from \"./utils\";\r\nimport { getCampaign, getEvent, getCampaigns, getYogscastAPI } from \"./tiltify\";\r\nimport { ApiResponse } from \"./types/ApiResponse\";\r\nimport { Env } from \"./env\";\r\nimport { Cause } from \"./types/Cause\";\r\nimport { DonationHistory } from \"./types/DonationHistory\";\r\nimport { TiltifyUserCampaign } from \"./types/tiltify/TiltifyUserCampaign\";\r\nimport { TiltifyFundraisingEvent } from \"./types/tiltify/TiltifyFundraisingEvent\";\r\nimport { YogscastDonationData } from \"./types/yogscast/YogscastDonationData\";\r\nimport { Campaign } from \"./types/Campaign\";\r\nimport { TiltifyFundraisingEventCampaign } from \"./types/tiltify/TiltifyFundraisingEventCampaign\";\r\n\r\nconst maxSim = 6; // Maximum number of simultaneous fetches\r\nconst maxNumOfCampaigns = 100;\r\nconst maxDescriptionLength = 1024;\r\nconst maxCampaigns = (20 * 900) - 2; // Maximum number of campaigns that can be fetched\r\nconst allCharitiesRegionId = 566;\r\n\r\n// Old Team Data\r\n// End of 2020 yogscast dollar amount = 2827226.00\r\n// End of 2021 yogscast dollar amount = 6571211.42\r\n\r\n// New User - @yogscast\r\n// Pre-2022 Jingle Jam dollar amount = 36023.96\r\n// End of 2022 yogscast dollar amount = 3368996.43\r\n// Pre-2023 Jingle Jam dollar amount = 3371741.16\r\n// End of 2023 yogscast dollar amount = 5747814.82\r\nasync function getSummaryData(env: Env): Promise<ApiResponse> {\r\n  let apiResponse = getDefaultResponse(env);\r\n  let campaignsComputed: Campaign[] = [];\r\n\r\n  try {\r\n    // INITIAL KV LOOKUPS\r\n    const causes: Cause[] = JSON.parse(await env.JINGLE_JAM_DATA.get('causes') || \"\") || [];\r\n    const summary: DonationHistory[] = JSON.parse(await env.JINGLE_JAM_DATA.get('summary') || \"\") || [];\r\n    apiResponse = getDefaultResponse(env, causes, summary, env.CONVERSION_RATE);\r\n\r\n    // INITIAL TILTIFY LOOKUPS\r\n    const requests = [\r\n      getCampaign(env.YOGSCAST_USERNAME_SLUG, env.YOGSCAST_CAMPAIGN_SLUG), // Gets Yogscast Campaign Data\r\n      getEvent(env.CAUSE_SLUG, env.FUNDRAISER_SLUG), // Gets Yearly Event Level Data\r\n      getYogscastAPI()\r\n    ];\r\n\r\n    const results = await Promise.all(requests);\r\n\r\n    const yogscastCampaign: TiltifyUserCampaign | null = results[0] as TiltifyUserCampaign | null;\r\n    const eventData: TiltifyFundraisingEvent | null = results[1] as TiltifyFundraisingEvent | null;\r\n    const yogscastAPI: YogscastDonationData | null = results[2] as YogscastDonationData | null;\r\n\r\n    // SUMMARY DATA\r\n    const totalPounds = parseFloat(eventData?.totalAmountRaised.value || \"0\");\r\n    const yogscastPounds = parseFloat(yogscastCampaign?.totalAmountRaised.value || \"0\");\r\n    const yogscastDollars = roundAmount(parseFloat(yogscastCampaign?.user.totalAmountRaised.value || \"0\") - env.DOLLAR_OFFSET);\r\n    const fundraiserPounds = roundAmount(totalPounds - yogscastPounds);\r\n\r\n    apiResponse.raised.yogscast = yogscastPounds;\r\n    apiResponse.raised.fundraisers = fundraiserPounds;\r\n\r\n    apiResponse.avgConversionRate = env.CONVERSION_RATE;\r\n    const division = yogscastDollars / yogscastPounds;\r\n    if (!isNaN(division) && isFinite(division)) {\r\n      apiResponse.avgConversionRate = roundAmount(division, 10);\r\n    }\r\n\r\n    // Gets collections counts\r\n    try {\r\n      const rewards = (eventData?.rewards?.length || 0) > 0 ? eventData?.rewards : yogscastCampaign?.rewards;\r\n      if (rewards && rewards.length > 0) {\r\n        apiResponse.collections.total = rewards[0].quantity;\r\n        apiResponse.collections.redeemed = apiResponse.collections.total - rewards[0].remaining;\r\n      }\r\n    } catch {\r\n      apiResponse.collections.total = env.COLLECTIONS_AVAILABLE;\r\n      apiResponse.collections.redeemed = 0;\r\n    }\r\n\r\n    // Donation counts from Yogscast API\r\n    apiResponse.donations.count = yogscastAPI?.donations || apiResponse.collections.redeemed || 0;\r\n\r\n    // CAMPAIGN DATA\r\n    let campaigns: { node: TiltifyFundraisingEventCampaign }[] = [];\r\n    let offset = 0;\r\n    let end = false;\r\n\r\n    if (env.FUNDRAISER_PUBLIC_ID) {\r\n      while (offset <= maxCampaigns && !end) {\r\n        const requests = Array.from({ length: maxSim }, () => getCampaigns(env.FUNDRAISER_PUBLIC_ID, offset));\r\n        offset += 20 * maxSim;\r\n\r\n        const regionResponses = await Promise.all(requests);\r\n\r\n        for (const response of regionResponses) {\r\n          const campaignsData = response.publishedCampaigns;\r\n          campaigns = campaigns.concat(campaignsData.edges);\r\n\r\n          if (!campaignsData.pagination.hasNextPage) {\r\n            end = true;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      let campaignAmountPounds = 0;\r\n      for (const campaign of campaigns) {\r\n        const campaignRegionId = campaign.node.region?.id || 0;\r\n        const isYogscastCampaign = campaign.node.user?.slug === env.YOGSCAST_USERNAME_SLUG;\r\n        const isAllCharitiesCampaign = !campaignRegionId || campaignRegionId === allCharitiesRegionId;\r\n\r\n        let amount = parseFloat(campaign.node.totalAmountRaised?.value || '0');\r\n        campaignAmountPounds += amount;\r\n\r\n        if (isAllCharitiesCampaign) {\r\n          amount /= apiResponse.causes.length;\r\n        }\r\n\r\n        amount = roundAmount(amount);\r\n\r\n        for (const cause of apiResponse.causes) {\r\n          if (cause.id === campaignRegionId || isAllCharitiesCampaign) {\r\n            if (isYogscastCampaign) {\r\n              cause.raised.yogscast += amount;\r\n            } else {\r\n              cause.raised.fundraisers += amount;\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      const amountDifference = totalPounds - campaignAmountPounds;\r\n      if (amountDifference > 0) {\r\n        apiResponse.raised.yogscast += amountDifference;\r\n        apiResponse.raised.fundraisers -= amountDifference;\r\n\r\n        apiResponse.raised.yogscast = roundAmount(apiResponse.raised.yogscast);\r\n        apiResponse.raised.fundraisers = roundAmount(apiResponse.raised.fundraisers);\r\n\r\n        const causeAmount = amountDifference / apiResponse.causes.length;\r\n        for (const cause of apiResponse.causes) {\r\n          cause.raised.yogscast += causeAmount;\r\n        }\r\n      }\r\n\r\n      for (const cause of apiResponse.causes) {\r\n        cause.raised.fundraisers = roundAmount(cause.raised.fundraisers);\r\n        cause.raised.yogscast = roundAmount(cause.raised.yogscast);\r\n      }\r\n    }\r\n\r\n    for (const campaign of campaigns) {\r\n      const description = campaign.node.description?.length > maxDescriptionLength\r\n        ? `${campaign.node.description.slice(0, maxDescriptionLength)}...`\r\n        : campaign.node.description;\r\n      campaignsComputed.push({\r\n        causeId: campaign.node.region?.id || null,\r\n        name: campaign.node.name,\r\n        description: description,\r\n        slug: campaign.node.slug,\r\n        url: `https://tiltify.com/@${campaign.node.user?.slug}/${campaign.node.slug}`,\r\n        startTime: campaign.node.publishedAt,\r\n        raised: roundAmount(parseFloat(campaign.node.totalAmountRaised?.value) || 0),\r\n        goal: roundAmount(parseFloat(campaign.node.goal?.value) || 0),\r\n        livestream: {\r\n          channel: campaign.node.livestream?.channel || campaign.node.user?.social.twitch,\r\n          type: campaign.node.livestream?.type || 'twitch',\r\n        },\r\n        user: {\r\n          id: campaign.node.user?.id,\r\n          name: campaign.node.user?.username,\r\n          slug: campaign.node.user?.slug,\r\n          avatar: campaign.node.user?.avatar.src,\r\n          url: `https://tiltify.com/@${campaign.node.user?.slug}`,\r\n        },\r\n      });\r\n    }\r\n\r\n    apiResponse.campaigns.count = campaignsComputed.length;\r\n    apiResponse.campaigns.list = sortByKey(campaignsComputed, 'raised').slice(0, maxNumOfCampaigns);\r\n\r\n  } catch (e) {\r\n    console.error(e);\r\n  }\r\n\r\n  return apiResponse;\r\n}\r\n\r\nfunction getDefaultResponse(env: Env, causes: Cause[] = [], donationHistory: DonationHistory[] = [], defaultConversionRate = 1, date = new Date()): ApiResponse {\r\n  const causeObjects: Cause[] = causes?.map(cause => ({\r\n    id: cause.id,\r\n    name: cause.name,\r\n    logo: cause.logo,\r\n    description: cause.description,\r\n    url: cause.url,\r\n    donateUrl: cause.donateUrl,\r\n    raised: { yogscast: 0, fundraisers: 0 },\r\n  }));\r\n\r\n  return {\r\n    date: date,\r\n    event: {\r\n      year: env.YEAR,\r\n      start: new Date(Date.UTC(env.YEAR, 11, 1, 17, 0, 0)),\r\n      end: new Date(Date.UTC(env.YEAR, 11, 15, 0, 0, 0)),\r\n    },\r\n    avgConversionRate: defaultConversionRate,\r\n    raised: {\r\n      yogscast: 0,\r\n      fundraisers: 0,\r\n    },\r\n    collections: {\r\n      redeemed: 0,\r\n      total: env.COLLECTIONS_AVAILABLE,\r\n    },\r\n    donations: {\r\n      count: 0,\r\n    },\r\n    history: donationHistory || [],\r\n    causes: causeObjects,\r\n    campaigns: {\r\n      count: 0,\r\n      list: [],\r\n    },\r\n  };\r\n}\r\n\r\nconst debugStartDate = new Date(2023, 9, 17, 20, 20, 10);\r\nconst debugEndDate = new Date(2023, 10, 13, 22, 10, 0);\r\n\r\nasync function getDebugData(env: Env): Promise<ApiResponse> {\r\n  const causes: Cause[] = JSON.parse(await env.JINGLE_JAM_DATA.get('causes') || \"\") || [];\r\n  const defaultConversionRate = env.CONVERSION_RATE;\r\n  const summary: DonationHistory[] = JSON.parse(await env.JINGLE_JAM_DATA.get('summary') || \"\") || [];\r\n\r\n  const defaultResponse = getDefaultResponse(env, causes, summary, defaultConversionRate);\r\n\r\n  defaultResponse.event.start = debugStartDate;\r\n  defaultResponse.event.end = debugEndDate;\r\n\r\n  const amount = 1 * Math.max(((new Date().getTime() - debugStartDate.getTime()) / 3.5913 % 5000000), 0);\r\n\r\n  defaultResponse.raised.yogscast = amount * 0.8;\r\n  defaultResponse.raised.fundraisers = amount * 0.2;\r\n\r\n  defaultResponse.collections.redeemed = parseInt((amount / 40.84).toFixed(0));\r\n  defaultResponse.donations.count = defaultResponse.collections.redeemed + 945;\r\n\r\n  for (const cause of defaultResponse.causes) {\r\n    cause.raised.yogscast = (amount / defaultResponse.causes.length) * 0.8;\r\n    cause.raised.fundraisers = (amount / defaultResponse.causes.length) * 0.2;\r\n  }\r\n\r\n  return defaultResponse;\r\n}\r\n\r\nexport async function getLatestData(env: Env): Promise<ApiResponse> {\r\n  env.DONATION_DIFFERENCE = parseInt(env.DONATION_DIFFERENCE.toString());\r\n  env.DOLLAR_OFFSET = parseFloat(env.DOLLAR_OFFSET.toString());\r\n  env.COLLECTIONS_AVAILABLE = parseInt(env.COLLECTIONS_AVAILABLE.toString());\r\n  env.YEAR = parseInt(env.YEAR.toString());\r\n  env.CONVERSION_RATE = parseFloat(env.CONVERSION_RATE.toString());\r\n\r\n  if (env.ENABLE_DEBUG) {\r\n    return await getDebugData(env);\r\n  }\r\n\r\n  return await getSummaryData(env);\r\n}\r\n", "import { getLatestData } from \"./api\";\r\nimport { Env } from \"./env\";\r\nimport { roundAmount } from \"./utils\";\r\n\r\nconst UPDATE_TIME_GRAPH = 60 * 1000; // Refresh cache every 60 seconds\r\nconst UPDATE_TIME_FREQ = 10; // Refresh graph every 10 minutes\r\n\r\nconst DO_CACHE_KEY = 'tiltify-cache'; // Key to store the cache\r\nconst CACHE_NAME = 'tiltify-cache-2023'; // Cache Object Name\r\n\r\nconst TILTIFY_API_PATH = '/api/tiltify'; // API Path for the Tiltify Cache\r\nconst GRAPH_API_PATH = '/api/graph/current'; // API Path for the Graph Data\r\n\r\ninterface State {\r\n  storage: DurableObjectStorage;\r\n}\r\n\r\nexport class TiltifyData {\r\n  state: State;\r\n  storage: DurableObjectStorage;\r\n  env: Env;\r\n\r\n  constructor(state: State, env: Env) {\r\n    this.state = state;\r\n    this.storage = state.storage;\r\n    this.env = env;\r\n  }\r\n\r\n  // Handle HTTP requests from clients.\r\n  async fetch(request: Request): Promise<Response> {\r\n    const url = new URL(request.url);\r\n    console.log('Called ' + url.pathname);\r\n\r\n    if (request.method === 'GET' && url.pathname === TILTIFY_API_PATH) {\r\n      // Get the current cached value\r\n      let data = await this.state.storage.get(DO_CACHE_KEY);\r\n\r\n      // Start the alarm if it is currently not started\r\n      let currentAlarm = await this.storage.getAlarm();\r\n      if (currentAlarm == null && this.env.ENABLE_REFRESH) {\r\n        this.storage.setAlarm(Date.now() + (this.env.REFRESH_TIME * 1000));\r\n      }\r\n\r\n      // If the cached value is null, fetch the latest data and save it to the cache\r\n      if (!data) {\r\n        data = await getLatestData(this.env);\r\n\r\n        if (this.env.ENABLE_REFRESH) {\r\n          await this.state.storage.put(DO_CACHE_KEY, data);\r\n        }\r\n      }\r\n\r\n      return new Response(JSON.stringify(data));\r\n    } else if (request.method === 'POST' && url.pathname === TILTIFY_API_PATH) {\r\n      const data = await request.json();\r\n      await this.state.storage.put(DO_CACHE_KEY, data);\r\n      return new Response(\"Manual Update Success\", { status: 200 });\r\n    }\r\n\r\n    // Invalid API Endpoint\r\n    return new Response(\"Not found\", { status: 404 });\r\n  }\r\n\r\n  async alarm(): Promise<void> {\r\n    if (this.env.ENABLE_REFRESH) {\r\n      this.storage.setAlarm(Date.now() + (this.env.REFRESH_TIME * 1000));\r\n    }\r\n\r\n    console.log('Alarm Called, fetching latest Tiltify data...');\r\n\r\n    const startTime = new Date();\r\n    const newData = await getLatestData(this.env);\r\n    const endTime = new Date();\r\n\r\n    console.log(`Finished Fetching, caching result Tiltify data... (${endTime.getTime() - startTime.getTime()}ms)`);\r\n\r\n    await this.state.storage.put(DO_CACHE_KEY, newData);\r\n\r\n    console.log(`Finished Caching data... (${new Date().getTime() - endTime.getTime()}ms)`);\r\n  }\r\n}\r\n\r\nexport class GraphData {\r\n  state: State;\r\n  storage: DurableObjectStorage;\r\n  env: Env;\r\n\r\n  constructor(state: State, env: Env) {\r\n    this.state = state;\r\n    this.storage = state.storage;\r\n    this.env = env;\r\n  }\r\n\r\n  // Handle HTTP requests from clients.\r\n  async fetch(request: Request): Promise<Response> {\r\n    const url = new URL(request.url);\r\n    console.log('Called ' + url.pathname);\r\n\r\n    if (request.method === 'GET' && url.pathname === GRAPH_API_PATH) {\r\n      let data = await this.state.storage.get(DO_CACHE_KEY) || null;\r\n\r\n      if (!data) {\r\n        data = await this.defaultObject();\r\n        await this.state.storage.put(DO_CACHE_KEY, data);\r\n      }\r\n\r\n      let currentAlarm = await this.storage.getAlarm();\r\n      if (currentAlarm == null && this.env.ENABLE_GRAPH_REFRESH) {\r\n        this.storage.setAlarm(Date.now() + UPDATE_TIME_GRAPH);\r\n      }\r\n\r\n      return new Response(JSON.stringify(data));\r\n    } else if (request.method === 'POST' && url.pathname === GRAPH_API_PATH) {\r\n      const data = await request.json();\r\n      await this.state.storage.put(DO_CACHE_KEY, data);\r\n      return new Response(\"Manual Update Success\", { status: 200 });\r\n    }\r\n\r\n    return new Response(\"Not found\", { status: 404 });\r\n  }\r\n\r\n  async alarm(): Promise<void> {\r\n    if (this.env.ENABLE_GRAPH_REFRESH) {\r\n      this.storage.setAlarm(Date.now() + UPDATE_TIME_GRAPH);\r\n    }\r\n\r\n    console.log('Alarm Called, fetching latest graph data...');\r\n\r\n    const startTime = new Date();\r\n    const graphData = await this.getLatestGraphData();\r\n    const endTime = new Date();\r\n\r\n    console.log(`Finished Fetching, caching result graph data... (${endTime.getTime() - startTime.getTime()}ms)`);\r\n\r\n    if (graphData !== null) {\r\n      await this.state.storage.put(DO_CACHE_KEY, graphData);\r\n    }\r\n  }\r\n\r\n  async getLatestGraphData(): Promise<any[] | null> {\r\n    const tiltifyData = await this.getLatestData();\r\n\r\n    if (!tiltifyData || new Date(tiltifyData.date).getMinutes() % UPDATE_TIME_FREQ !== 0) {\r\n      return null;\r\n    }\r\n\r\n    const date = new Date(tiltifyData.date);\r\n    const startDate = new Date(tiltifyData.event.start);\r\n    const endDate = new Date(tiltifyData.event.end);\r\n\r\n    if (date < startDate || date > endDate) {\r\n      return null;\r\n    }\r\n\r\n    let graphData: any[] = [];\r\n    try {\r\n      graphData = (await this.state.storage.get(DO_CACHE_KEY)) || [];\r\n    } catch (e) { }\r\n\r\n    if (graphData.length === 0) {\r\n      graphData = await this.defaultObject(tiltifyData);\r\n    }\r\n\r\n    const pounds = roundAmount(tiltifyData.raised.yogscast + tiltifyData.raised.fundraisers);\r\n    graphData.push({\r\n      \"date\": date.getTime(),\r\n      \"p\": pounds,\r\n      \"d\": roundAmount(pounds * tiltifyData.avgConversionRate),\r\n    });\r\n\r\n    return graphData;\r\n  }\r\n\r\n  async defaultObject(data?: any): Promise<any[]> {\r\n    if (!data) {\r\n      data = await this.getLatestData();\r\n    }\r\n\r\n    if (!data) {\r\n      return [{\r\n        \"date\": Date.now(),\r\n        \"p\": 0,\r\n        \"d\": 0\r\n      }];\r\n    }\r\n\r\n    return [{\r\n      \"date\": new Date(data.event.start).getTime(),\r\n      \"p\": 0,\r\n      \"d\": 0\r\n    }];\r\n  }\r\n\r\n  async getLatestData(): Promise<any> {\r\n    const id = this.env.TILTIFY_DATA.idFromName(CACHE_NAME);\r\n    const obj = this.env.TILTIFY_DATA.get(id);\r\n    const resp = await obj.fetch(\"http://127.0.0.1\" + TILTIFY_API_PATH);\r\n    return await resp.json();\r\n  }\r\n}\r\n\r\nexport default {};"],
  "mappings": "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",
  "names": ["sortByKey", "array", "key", "b", "x", "y", "roundAmount", "val", "decimals", "TILTIFY_API_ENDPOINT", "TILTIFY_API_OPTIONS", "getCampaign", "userSlug", "campaignSlug", "request", "getEvent", "causeSlug", "fundraiserSlug", "getCampaigns", "fundraiserPublicId", "offset", "getYogscastAPI", "maxSim", "maxNumOfCampaigns", "maxDescriptionLength", "maxCampaigns", "allCharitiesRegionId", "getSummaryData", "env", "apiResponse", "getDefaultResponse", "campaignsComputed", "causes", "summary", "requests", "getCampaign", "getEvent", "getYogscastAPI", "results", "yogscastCampaign", "eventData", "yogscastAPI", "totalPounds", "yogscastPounds", "yogscastDollars", "roundAmount", "fundraiserPounds", "division", "rewards", "campaigns", "offset", "end", "getCampaigns", "regionResponses", "response", "campaignsData", "campaignAmountPounds", "campaign", "campaignRegionId", "isYogscastCampaign", "isAllCharitiesCampaign", "amount", "cause", "amountDifference", "causeAmount", "description", "sortByKey", "e", "donationHistory", "defaultConversionRate", "date", "causeObjects", "debugStartDate", "debugEndDate", "getDebugData", "defaultResponse", "getLatestData", "UPDATE_TIME_GRAPH", "UPDATE_TIME_FREQ", "DO_CACHE_KEY", "CACHE_NAME", "TILTIFY_API_PATH", "GRAPH_API_PATH", "TiltifyData", "state", "env", "request", "url", "data", "getLatestData", "startTime", "newData", "endTime", "GraphData", "graphData", "tiltifyData", "date", "startDate", "endDate", "pounds", "roundAmount", "id", "src_default"]
}
